import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst } from 'workbox-strategies';

const baseURL = '/BerbagiCeritaku/';

// Push notification event handler
self.addEventListener('push', event => {
  const data = event.data.json();
  const options = {
    body: data.options.body,
    icon: `${baseURL}images/icon.png`,
    badge: `${baseURL}images/icon.png`,
  };
  event.waitUntil(
    self.registration.showNotification(data.title, options)
  );
});

// Notification click event handler
self.addEventListener('notificationclick', event => {
  event.notification.close();
  const urlToOpen = event.notification.data || 'https://xraxs.github.io/BerbagiCeritaku/';

  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true }).then(clientList => {
      for (const client of clientList) {
        if (client.url === urlToOpen && 'focus' in client) {
          return client.focus();
        }
      }
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});

// Precache all assets generated by webpack build
precacheAndRoute(self.__WB_MANIFEST || []);

// Cache HTML pages with NetworkFirst strategy
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages-cache',
    networkTimeoutSeconds: 3,
  })
);

// Cache CSS, JS, and images from own origin with CacheFirst
registerRoute(
  ({ request }) =>
    ['style', 'script', 'image'].includes(request.destination) &&
    request.url.startsWith(self.location.origin),
  new CacheFirst({
    cacheName: 'assets-cache',
  })
);

// Cache external story images from story-api.dicoding.dev with CacheFirst
registerRoute(
  ({ url }) =>
    url.origin === 'https://story-api.dicoding.dev' &&
    url.pathname.startsWith('/images/stories/'),
  new CacheFirst({
    cacheName: 'story-images-cache',
  })
);

// Fallback for images: if offline and image not cached, show placeholder
self.addEventListener('fetch', event => {
  if (event.request.destination === 'image') {
    event.respondWith(
      caches.match(event.request).then(cachedResponse => {
        return (
          cachedResponse ||
          fetch(event.request).catch(() => caches.match(`${baseURL}images/placeholder.png`))
        );
      })
    );
  }
});
